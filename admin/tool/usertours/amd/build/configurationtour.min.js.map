{"version":3,"file":"configurationtour.min.js","sources":["../src/configurationtour.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * User tours configuration.\n *\n * @module      tool_usertours/configurationtour\n * @copyright   2024 The Open University\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst ANY_VALUE = \"__ANYVALUE__\";\n\nexport const init = () => {\n    // Initialize the category filter\n    initConfigurationCategoryFilter();\n};\n\n/**\n * Initialize the category filter for the configuration page.\n */\nconst initConfigurationCategoryFilter = () => {\n    const categorySelect = document.querySelector(\"[name='filter_category[]']\");\n    const excludeSelect = document.querySelector(\"[name='filter_exclude_category[]']\");\n\n    if (categorySelect && excludeSelect) {\n        // Add event listeners to update the exclude categories when the include categories change.\n        categorySelect.addEventListener(\"change\", () => {\n            updateExcludeCategories(categorySelect, excludeSelect);\n        });\n\n        // Initialize the exclude categories based on the selected include categories.\n        updateExcludeCategories(categorySelect, excludeSelect);\n    }\n};\n\n/**\n * Adjust the height of a select element based on the number of options.\n *\n * @param {HTMLSelectElement} select\n */\nconst adjustHeight = (select) => {\n    select.size = Math.min(select.options.length || 1, 10);\n};\n\n/**\n * Update the exclude categories based on the selected include categories.\n *\n * @param {HTMLSelectElement} categorySelect\n * @param {HTMLSelectElement} excludeSelect\n */\nconst updateExcludeCategories = (categorySelect, excludeSelect) => {\n    // Get the selected categories and update the 'Any' option.\n    const selectedCategories = new Set(Array.from(categorySelect.selectedOptions).map(option => option.value));\n\n    // Get the selected exclude categories and create a map of options.\n    const excludeSelected = new Set(Array.from(excludeSelect.selectedOptions).map(option => option.value));\n    const excludeOptions = new Map();\n\n    // Flag to check if 'Any' value is selected.\n    const anySelected = selectedCategories.has(ANY_VALUE);\n    Array.from(categorySelect.options).forEach(option => {\n        const isNotAny = option.value !== ANY_VALUE;\n\n        // If 'Any' is selected, include all options in excludeOptions.\n        if (anySelected && isNotAny) {\n            excludeOptions.set(option.value, option.text);\n            // eslint-disable-next-line brace-style\n        }\n        // Otherwise, check if the option is a child of any selected category.\n        else if (isNotAny) {\n            for (const selected of selectedCategories) {\n                const selectedOption = categorySelect.querySelector(`option[value=\"${selected}\"]`);\n                if (option.text.startsWith(`${selectedOption.text} / `)) {\n                    excludeOptions.set(option.value, option.text);\n                    break;\n                }\n            }\n        }\n    });\n\n    // Update the exclude categories select element.\n    excludeSelect.innerHTML = Array.from(excludeOptions)\n        .sort(([, a], [, b]) => a.localeCompare(b))\n        .map(([key, value]) =>\n            `<option value=\"${key}\" ${excludeSelected.has(key) ? 'selected' : ''}>${value}</option>`\n        ).join('');\n\n    // Adjust the height of the select elements.\n    adjustHeight(excludeSelect);\n};\n"],"names":["initConfigurationCategoryFilter","categorySelect","document","querySelector","excludeSelect","addEventListener","updateExcludeCategories","selectedCategories","Set","Array","from","selectedOptions","map","option","value","excludeSelected","excludeOptions","Map","anySelected","has","select","options","forEach","isNotAny","set","text","selected","selectedOption","startsWith","innerHTML","sort","a","b","localeCompare","_ref3","key","join","size","Math","min","length"],"mappings":"qKAwBoB,KAEhBA,yCAMEA,gCAAkC,WAC9BC,eAAiBC,SAASC,cAAc,8BACxCC,cAAgBF,SAASC,cAAc,sCAEzCF,gBAAkBG,gBAElBH,eAAeI,iBAAiB,UAAU,KACtCC,wBAAwBL,eAAgBG,kBAI5CE,wBAAwBL,eAAgBG,iBAmB1CE,wBAA0B,CAACL,eAAgBG,uBAEvCG,mBAAqB,IAAIC,IAAIC,MAAMC,KAAKT,eAAeU,iBAAiBC,KAAIC,QAAUA,OAAOC,SAG7FC,gBAAkB,IAAIP,IAAIC,MAAMC,KAAKN,cAAcO,iBAAiBC,KAAIC,QAAUA,OAAOC,SACzFE,eAAiB,IAAIC,IAGrBC,YAAcX,mBAAmBY,IAjDzB,gBA8BIC,IAAAA,OAoBlBX,MAAMC,KAAKT,eAAeoB,SAASC,SAAQT,eACjCU,SAnDI,iBAmDOV,OAAOC,SAGpBI,aAAeK,SACfP,eAAeQ,IAAIX,OAAOC,MAAOD,OAAOY,WAIvC,GAAIF,aACA,MAAMG,YAAYnB,mBAAoB,OACjCoB,eAAiB1B,eAAeE,sCAA+BuB,mBACjEb,OAAOY,KAAKG,qBAAcD,eAAeF,aAAY,CACrDT,eAAeQ,IAAIX,OAAOC,MAAOD,OAAOY,iBAQxDrB,cAAcyB,UAAYpB,MAAMC,KAAKM,gBAChCc,MAAK,oBAAIC,UAAOC,gBAAOD,EAAEE,cAAcD,MACvCpB,KAAIsB,YAAEC,IAAKrB,4CACUqB,iBAAQpB,gBAAgBI,IAAIgB,KAAO,WAAa,eAAMrB,sBAC1EsB,KAAK,KA7COhB,OAgDLhB,eA/CNiC,KAAOC,KAAKC,IAAInB,OAAOC,QAAQmB,QAAU,EAAG"}