{"version":3,"file":"question_engine.min.js","sources":["../src/question_engine.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript required by the question engine.\n *\n * @module     core_question/question_engine\n * @copyright  2021 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as scrollManager from 'core/scroll_manager';\nimport * as formSubmit from 'core_form/submit';\n\n/**\n * Initialise a question submit button. This saves the scroll position and\n * sets the fragment on the form submit URL so the page reloads in the right place.\n *\n * @param {string} button the id of the button in the HTML.\n */\nexport const initSubmitButton = button => {\n    formSubmit.init(button);\n    scrollManager.watchScrollButtonSaves();\n};\n\n/**\n * Allow check button to pass value to form.\n *\n * @param {string} elementId the id of the button in the HTML.\n */\nexport const initCheckButton = elementId => {\n    const button = document.getElementById(elementId);\n    button.addEventListener('click', function(event) {\n        document.getElementById(\"checkedslot\").value = event.target.dataset.slot;\n    });\n};\n\n/**\n * Focus the feedback.\n */\nexport const focusFeedback = () => {\n    // Wait for the window to load, then focus the feedback.\n    setTimeout(function() {\n        const describedfeedback = document.getElementById(\"describedfeedback\");\n        if (describedfeedback) {\n            describedfeedback.focus();\n        }\n    });\n};\n\n/**\n * Initialise a form that contains questions printed using print_question.\n * This has the effect of:\n * 1. Turning off browser autocomlete.\n * 2. Stopping enter from submitting the form (or toggling the next flag) unless\n *    keyboard focus is on the submit button or the flag.\n * 3. Removes any '.questionflagsavebutton's, since we have JavaScript to toggle\n *    the flags using ajax.\n * 4. Scroll to the position indicated by scrollpos= in the URL, if it is there.\n * 5. Prevent the user from repeatedly submitting the form.\n *\n * @param {string} formSelector Selector to identify the form.\n */\nexport const initForm = (formSelector) => {\n    const form = document.querySelector(formSelector);\n    form.setAttribute('autocomplete', 'off');\n\n    form.addEventListener('submit', preventRepeatSubmission);\n\n    form.addEventListener('key', (event) => {\n        if (event.keyCode !== 13) {\n            return;\n        }\n\n        if (event.target.matches('a')) {\n            return;\n        }\n\n        if (event.target.matches('input[type=\"submit\"]')) {\n            return;\n        }\n\n        if (event.target.matches('input[type=img]')) {\n            return;\n        }\n\n        if (event.target.matches('textarea') || event.target.matches('[contenteditable=true]')) {\n            return;\n        }\n\n        event.preventDefault();\n    });\n\n    const questionFlagSaveButtons = form.querySelectorAll('.questionflagsavebutton');\n    [...questionFlagSaveButtons].forEach((node) => node.remove());\n\n    // Note: The scrollToSavedPosition function tries to wait until the content has loaded before firing.\n    scrollManager.scrollToSavedPosition();\n};\n\n/**\n * Event handler to stop a question form being submitted more than once.\n *\n * @param {object} event the form submit event.\n */\nexport const preventRepeatSubmission = (event) => {\n    const form = event.target.closest('form');\n    if (form.dataset.formSubmitted === '1') {\n        event.preventDefault();\n        return;\n    }\n\n    setTimeout(() => {\n        [...form.querySelectorAll('input[type=submit]')].forEach((input) => input.setAttribute('disabled', true));\n    });\n    form.dataset.formSubmitted = '1';\n};\n"],"names":["button","formSubmit","init","scrollManager","watchScrollButtonSaves","elementId","document","getElementById","addEventListener","event","value","target","dataset","slot","setTimeout","describedfeedback","focus","formSelector","form","querySelector","setAttribute","preventRepeatSubmission","keyCode","matches","preventDefault","querySelectorAll","forEach","node","remove","scrollToSavedPosition","closest","formSubmitted","input"],"mappings":";;;;;;;+TAgCgCA,SAC5BC,WAAWC,KAAKF,QAChBG,cAAcC,mDAQaC,YACZC,SAASC,eAAeF,WAChCG,iBAAiB,SAAS,SAASC,OACtCH,SAASC,eAAe,eAAeG,MAAQD,MAAME,OAAOC,QAAQC,gCAO/C,KAEzBC,YAAW,iBACDC,kBAAoBT,SAASC,eAAe,qBAC9CQ,mBACAA,kBAAkBC,8BAkBLC,qBACfC,KAAOZ,SAASa,cAAcF,cACpCC,KAAKE,aAAa,eAAgB,OAElCF,KAAKV,iBAAiB,SAAUa,yBAEhCH,KAAKV,iBAAiB,OAAQC,QACJ,KAAlBA,MAAMa,UAINb,MAAME,OAAOY,QAAQ,MAIrBd,MAAME,OAAOY,QAAQ,yBAIrBd,MAAME,OAAOY,QAAQ,oBAIrBd,MAAME,OAAOY,QAAQ,aAAed,MAAME,OAAOY,QAAQ,2BAI7Dd,MAAMe,yBAGsBN,KAAKO,iBAAiB,4BACzBC,SAASC,MAASA,KAAKC,WAGpDzB,cAAc0B,+BAQLR,wBAA2BZ,cAC9BS,KAAOT,MAAME,OAAOmB,QAAQ,QACC,MAA/BZ,KAAKN,QAAQmB,eAKjBjB,YAAW,SACHI,KAAKO,iBAAiB,uBAAuBC,SAASM,OAAUA,MAAMZ,aAAa,YAAY,QAEvGF,KAAKN,QAAQmB,cAAgB,KAPzBtB,MAAMe"}