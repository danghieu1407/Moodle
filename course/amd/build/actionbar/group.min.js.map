{"version":3,"file":"group.min.js","sources":["../../src/actionbar/group.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport GroupSearch from 'core_group/comboboxsearch/group';\nimport {groupFetch} from 'core_group/comboboxsearch/repository';\n\n/**\n * Allow the user to search for groups in the action bar.\n *\n * @module    core_course/actionbar/group\n * @copyright 2024 Shamim Rezaie <shamim@moodle.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class Group extends GroupSearch {\n\n    baseUrl;\n    static extraParams;\n\n    /**\n     * Construct the class.\n     * @param {string} baseUrl The base URL for the page.\n     */\n    constructor(baseUrl) {\n        super();\n        this.baseUrl = baseUrl;\n    }\n\n    /**\n     * Allow the class to be invoked via PHP.\n     *\n     * @param {string} baseUrl The base URL for the page.\n     * @param {Object} extraParams Extra parameters.\n     * @returns {Group}\n     */\n    static init(baseUrl, extraParams) {\n        Group.extraParams = extraParams;\n        return new Group(baseUrl);\n    }\n\n    /**\n     * Build up the link that is dedicated to a particular result.\n     *\n     * @param {Number} groupID The ID of the group selected.\n     * @returns {string}\n     */\n    selectOneLink(groupID) {\n        const url = new URL(this.baseUrl);\n        url.searchParams.set('groupsearchvalue', this.getSearchTerm());\n        url.searchParams.set('group', groupID);\n        for (let param in Group.extraParams.params) {\n            if (param === 'group') {\n                continue;\n            }\n            url.searchParams.set(param, Group.extraParams.params[param]);\n        }\n\n        return url.toString();\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {Promise<*>}\n     */\n    async fetchDataset() {\n        return await groupFetch(this.courseID, Group?.extraParams?.cmid ?? null).then((r) => r.groups);\n    }\n}\n"],"names":["Group","GroupSearch","constructor","baseUrl","extraParams","selectOneLink","groupID","url","URL","this","searchParams","set","getSearchTerm","param","params","toString","courseID","_Group$extraParams","cmid","then","r","groups"],"mappings":";;;;;;;iJAyBqBA,cAAcC,eAS/BC,YAAYC,6DAEHA,QAAUA,oBAUPA,QAASC,oBACjBJ,MAAMI,YAAcA,YACb,IAAIJ,MAAMG,SASrBE,cAAcC,eACJC,IAAM,IAAIC,IAAIC,KAAKN,SACzBI,IAAIG,aAAaC,IAAI,mBAAoBF,KAAKG,iBAC9CL,IAAIG,aAAaC,IAAI,QAASL,aACzB,IAAIO,SAASb,MAAMI,YAAYU,OAClB,UAAVD,OAGJN,IAAIG,aAAaC,IAAIE,MAAOb,MAAMI,YAAYU,OAAOD,eAGlDN,IAAIQ,0FASE,0BAAWN,KAAKO,uCAAUhB,MAAAA,kCAAAA,MAAOI,iDAAPa,mBAAoBC,4DAAQ,MAAMC,MAAMC,GAAMA,EAAEC,wDApD1ErB"}